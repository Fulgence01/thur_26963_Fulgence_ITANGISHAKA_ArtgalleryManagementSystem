-- Create Pluggable Database
 CREATE PLUGGABLE DATABASE thur_26963_pdb_assI ADMIN USER pdb_admin_26963 IDENTIFIED BY "admin" FILE_NAME_CONVERT = ('C:\oracle21c\oradata\ORCL\pdbseed', 'C:\oradata\ORCL\orclpdb\thur_26963_pdb_assI');

Pluggable database created.

-- Open the Pluggable Database
ALTER PLUGGABLE DATABASE thur_26963_pdb_assI OPEN READ WRITE;

ERROR at line 1:
ORA-01031: insufficient privileges

-- Switch to CDB$ROOT and connect as SYSDBA
ALTER SESSION SET CONTAINER = CDB$ROOT;

Session altered.

CONNECT sys/Divine5658@localhost:1521/ORCL AS SYSDBA;
Connected.

ALTER PLUGGABLE DATABASE thur_26963_pdb_assI OPEN READ WRITE;

Pluggable database altered.

-- Create Tables
CREATE TABLE AUTHORS ( author_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR2(100) NOT NULL, bio VARCHAR2(4000));

Table created.
CREATE TABLE BOOKS ( book_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY title VARCHAR2(200) NOT NULL, author_id NUMBER NOT NULL, published_date  DATE, copies_available  NUMBER DEFAULT 0, CONSTRAINT fk_books_authors FOREIGN KEY (author_id) REFERENCES AUTHORS(author_id));

Table created.

CREATE TABLE MEMBERS (member_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,first_name VARCHAR2(50) NOT NULL,last_name VARCHAR2(50) NOT NULL, email VARCHAR2(100), membership_date  DATE DEFAULT SYSDATE);

Table created.

CREATE TABLE LOANS (loan_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, book_id NUMBER NOT NULL, member_id    NUMBER NOT NULL, DATE DEFAULT SYSDATE, due_date DATE, return_date  DATE, CONSTRAINT fk_loans_books FOREIGN KEY (book_id) REFERENCES BOOKS(book_id), CONSTRAINT fk_loans_members FOREIGN KEY (member_id) REFERENCES MEMBERS(member_id));

Table created.

-- Insert Data

INSERT INTO AUTHORS (name, bio) VALUES ('J.K. Rowling', 'British author, best known for the Harry Potter series.');

INSERT INTO AUTHORS (name, bio) VALUES ('George R.R. Martin', 'American novelist and short story writer, known for A Song of Ice and Fire.');

INSERT INTO BOOKS (title, author_id, published_date, copies_available) VALUES ('Harry Potter and the Sorcerer''s Stone', 1, TO_DATE('1997-06-26','YYYY-MM-DD'), 10);

INSERT INTO BOOKS (title, author_id, published_date, copies_available) VALUES ('Harry Potter and the Chamber of Secrets', 1, TO_DATE('1998-07-02','YYYY-MM-DD'), 8);

INSERT INTO BOOKS (title, author_id, published_date, copies_available) VALUES ('A Game of Thrones', 2, TO_DATE('1996-08-06','YYYY-MM-DD'), 5);

INSERT INTO BOOKS (title, author_id, published_date, copies_available) VALUES ('A Clash of Kings', 2, TO_DATE('1998-11-16','YYYY-MM-DD'), 4);

INSERT INTO MEMBERS (first_name, last_name, email, membership_date) VALUES ('Alice', 'Smith', 'alice.smith@example.com', SYSDATE - 2);

INSERT INTO MEMBERS (first_name, last_name, email, membership_date) VALUES ('Bob', 'Jones', 'bob.jones@example.com', SYSDATE - 10);

INSERT INTO MEMBERS (first_name, last_name, email, membership_date) VALUES ('Carol', 'Taylor', 'carol.taylor@example.com', SYSDATE - 5);

INSERT INTO MEMBERS (first_name, last_name, email, membership_date) VALUES ('David', 'Brown', 'david.brown@example.com', SYSDATE);

INSERT INTO LOANS (book_id, member_id, loan_date, due_date) VALUES (1, 1, SYSDATE - 1, SYSDATE + 14);

INSERT INTO LOANS (book_id, member_id, loan_date, due_date) VALUES (3, 1, SYSDATE - 3, SYSDATE + 14);

INSERT INTO LOANS (book_id, member_id, loan_date, due_date) VALUES (2, 3, SYSDATE - 2, SYSDATE + 14);

INSERT INTO LOANS (book_id, member_id, loan_date, due_date) VALUES (4, 4, SYSDATE - 7, SYSDATE + 14);

INSERT INTO LOANS (book_id, member_id, loan_date, due_date) VALUES (1, 4, SYSDATE - 8, SYSDATE + 14);

INSERT INTO LOANS (book_id, member_id, loan_date, due_date) VALUES (3, 4, SYSDATE - 5, SYSDATE + 14);

COMMIT;

Commit complete.

-- Update and Delete Operations
 UPDATE BOOKS SET copies_available = copies_available + 5 WHERE book_id = 1;

 DELETE FROM MEMBERS WHERE member_id = 2;

COMMIT;

-- Queries

SELECT b.title, a.name AS author, b.copies_available FROM BOOKS b JOIN AUTHORS a ON b.author_id = a.author_id;

SELECT * FROM MEMBERS WHERE membership_date >= SYSDATE - 7;

SELECT * FROM (SELECT book_id, title, copies_available, RANK() OVER (ORDER BY copies_available DESC) as rank_val FROM BOOKS ) WHERE rank_val <= 5;

SELECT m.member_id, m.first_name, m.last_name, COUNT(l.loan_id) AS loan_count FROM MEMBERS m JOIN LOANS l ON m.member_id = l.member_id GROUP BY m.member_id, m.first_name, m.last_name HAVING COUNT(l.loan_id) > 2;

SELECT title FROM BOOKS WHERE book_id IN (SELECT book_id FROM LOANS);

-- Grant Permissions
GRANT SELECT ON BOOKS TO PUBLIC;
